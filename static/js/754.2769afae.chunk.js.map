{"version":3,"file":"static/js/754.2769afae.chunk.js","mappings":"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","sources":["components/Contact/Contact.jsx","redux/contacts/selectors.js","redux/filter/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/ContactFilter/ContactFilter.jsx","pages/Contacts.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nimport PropTypes from 'prop-types';\n\nimport { TableRow, TableCell, IconButton } from '@mui/material';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport Avatar from 'react-avatar';\nimport { toast } from 'react-toastify';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <TableRow key={id}>\n      <TableCell component=\"th\" scope=\"row\" align=\"center\">\n        <Avatar name={name} size={30} round={true} />\n      </TableCell>\n      <TableCell align=\"center\">{name}</TableCell>\n      <TableCell align=\"center\">{number}</TableCell>\n      <TableCell align=\"center\">\n        <IconButton\n          color=\"error\"\n          onClick={() => {\n            toast.info('Your contact has been deleted!');\n            dispatch(handleDelete);\n          }}\n        >\n          <ClearIcon />\n        </IconButton>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","export const selectLoading = state => state.contacts.isLoading;\n\nexport const selectContacts = state => state.contacts.items;\n","export const selectFilter = state => state.filter;\n","import { useSelector } from 'react-redux';\nimport { Contact } from 'components/Contact/Contact';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/filter/selectors';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@mui/material';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const getVisibleContact = (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n  const visibleContacts = getVisibleContact(contacts, filter);\n\n  return (\n    <>\n      {visibleContacts.length !== 0 ? (\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Avatar</TableCell>\n              <TableCell align=\"center\">Name</TableCell>\n              <TableCell align=\"center\">Phone</TableCell>\n              <TableCell align=\"center\">Delete</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {visibleContacts.map(({ id, name, number }) => {\n              return <Contact key={id} id={id} name={name} number={number} />;\n            })}\n          </TableBody>\n        </Table>\n      ) : (\n        <Typography align=\"center\" variant=\"h6\" marginBottom={2} marginTop={2}>\n          No matches found\n        </Typography>\n      )}\n    </>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { TextField, Button, Stack, Container } from '@mui/material';\nimport { toast } from 'react-toastify';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target.elements;\n    const nameOnInput = form.name.value;\n\n    const namesInStore = contacts.map(contact => contact.name.toLowerCase());\n\n    if (namesInStore.includes(nameOnInput.toLowerCase())) {\n      toast.error(`${nameOnInput} is already in contacts.`);\n      return;\n    }\n\n    dispatch(\n      addContact({\n        name: nameOnInput,\n        number: form.number.value,\n      })\n    );\n    toast.success('New contact added!');\n\n    event.target.reset();\n  };\n\n  return (\n    <Container maxWidth=\"xs\">\n      <form onSubmit={handleSubmit}>\n        <Stack spacing={2}>\n          <TextField\n            label=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            required\n            placeholder=\"Name\"\n            variant=\"outlined\"\n            size=\"small\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            inputProps={{\n              pattern:\n                \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n            }}\n          />\n          <TextField\n            label=\"Phone\"\n            type=\"tel\"\n            name=\"number\"\n            required\n            placeholder=\"+38 (111) 111 11 11\"\n            variant=\"outlined\"\n            size=\"small\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            inputProps={{\n              pattern:\n                '\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}',\n            }}\n          />\n          <Button variant=\"contained\" type=\"submit\">\n            Add Contact\n          </Button>\n        </Stack>\n      </form>\n    </Container>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { setFilter } from '../../redux/filter/filterSlice';\nimport { TextField } from '@mui/material';\nimport { Container } from '@mui/material';\n\nexport const ContactFilter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onChangeFilter = e => {\n    const searchContact = e.target.value;\n\n    dispatch(setFilter(searchContact.toLowerCase()));\n  };\n\n  return (\n    <Container maxWidth=\"xs\" sx={{ mt: '1rem' }}>\n      <TextField\n        label=\"Search\"\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n        placeholder=\"Find contacts by name\"\n        variant=\"outlined\"\n        size=\"small\"\n        fullWidth\n      />\n    </Container>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport { Typography, CircularProgress, Box } from '@mui/material';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Typography align=\"center\" variant=\"h5\" marginBottom={2} marginTop={2}>\n        Add new contact\n      </Typography>\n      <ContactForm />\n      <ContactFilter />\n\n      {isLoading ? (\n        <Box\n          sx={{\n            marginTop: '10px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <CircularProgress />\n        </Box>\n      ) : contacts.length > 0 ? (\n        <>\n          <Typography\n            align=\"center\"\n            variant=\"h5\"\n            marginBottom={2}\n            marginTop={2}\n          >\n            Your contacts\n          </Typography>\n          <ContactList />\n        </>\n      ) : (\n        <Typography align=\"center\" variant=\"h6\" marginBottom={2} marginTop={2}>\n          You don't have any contact\n        </Typography>\n      )}\n    </>\n  );\n}\n"],"names":["Contact","id","name","number","dispatch","useDispatch","handleDelete","deleteContact","TableRow","TableCell","component","scope","align","size","round","IconButton","color","onClick","toast","Clear","selectLoading","state","contacts","isLoading","selectContacts","items","selectFilter","filter","ContactList","visibleContacts","contact","toLowerCase","includes","getVisibleContact","useSelector","length","Table","TableHead","TableBody","map","Typography","variant","marginBottom","marginTop","ContactForm","Container","maxWidth","onSubmit","event","preventDefault","form","target","elements","nameOnInput","value","addContact","reset","Stack","spacing","TextField","label","type","required","placeholder","title","inputProps","pattern","Button","ContactFilter","sx","mt","onChange","e","searchContact","setFilter","fullWidth","Contacts","useEffect","fetchContacts","Box","display","justifyContent","alignItems","CircularProgress"],"sourceRoot":""}